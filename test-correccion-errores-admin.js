#!/usr/bin/env node

/**
 * üîß SCRIPT DE VERIFICACI√ìN - CORRECCI√ìN ERRORES ADMIN
 * Verifica las correcciones implementadas:
 * ‚úÖ Eliminaci√≥n de avisos de "Modo Supervisi√≥n"
 * ‚úÖ Correcci√≥n de campos en el controlador (camelCase)
 * ‚úÖ Funci√≥n verDetalle operativa
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Verificando correcci√≥n de errores en admin');
console.log('=' .repeat(70));

let verificacionCompleta = true;
let contadorExitos = 0;
let contadorTotal = 0;

/**
 * Funci√≥n auxiliar para verificar contenido
 */
function verificarContenido(archivo, patron, descripcion, exito = null, negativo = false) {
  contadorTotal++;
  
  try {
    if (!fs.existsSync(archivo)) {
      console.log(`‚ùå ${descripcion}: Archivo no encontrado - ${archivo}`);
      verificacionCompleta = false;
      return false;
    }
    
    const contenido = fs.readFileSync(archivo, 'utf8');
    const coincide = typeof patron === 'string' ? 
      contenido.includes(patron) : 
      patron.test(contenido);
    
    if (negativo) {
      // Para verificar que algo NO est√© presente
      if (!coincide) {
        console.log(`‚úÖ ${descripcion}${exito ? ` - ${exito}` : ''}`);
        contadorExitos++;
        return true;
      } else {
        console.log(`‚ùå ${descripcion}: A√∫n presente (deber√≠a estar eliminado)`);
        verificacionCompleta = false;
        return false;
      }
    } else {
      // Para verificar que algo S√ç est√© presente
      if (coincide) {
        console.log(`‚úÖ ${descripcion}${exito ? ` - ${exito}` : ''}`);
        contadorExitos++;
        return true;
      } else {
        console.log(`‚ùå ${descripci√≥n}: No encontrado`);
        verificacionCompleta = false;
        return false;
      }
    }
  } catch (error) {
    console.log(`‚ùå ${descripcion}: Error - ${error.message}`);
    verificacionCompleta = false;
    return false;
  }
}

console.log('\nüóëÔ∏è  1. VERIFICANDO ELIMINACI√ìN DE AVISOS');
console.log('-'.repeat(50));

// Verificar que el aviso del header est√© eliminado
verificarContenido(
  'views/admin/documentos/listado.hbs',
  'Modo Supervisi√≥n: Solo puede consultar informaci√≥n',
  'Aviso header eliminado',
  'Header limpio y profesional',
  true // negativo - verificar que NO est√© presente
);

// Verificar que el aviso grande est√© eliminado
verificarContenido(
  'views/admin/documentos/listado.hbs',
  'Segregaci√≥n de Funciones - Control de Auditor√≠a',
  'Aviso segregaci√≥n eliminado',
  'Interfaz m√°s limpia',
  true // negativo
);

// Verificar que el aviso de detalle est√© eliminado
verificarContenido(
  'views/admin/documentos/detalle.hbs',
  'Modo Supervisi√≥n Activo: Esta vista es de solo lectura',
  'Aviso detalle eliminado',
  'Vista de detalle limpia',
  true // negativo
);

console.log('\nüîß 2. VERIFICANDO CORRECCIONES DE BACKEND');
console.log('-'.repeat(50));

// Verificar correcci√≥n de estadoPago
verificarContenido(
  'controllers/adminController.js',
  'where.estadoPago = estadoPago;  // CORREGIDO: Usar camelCase',
  'Campo estadoPago corregido',
  'Usa camelCase consistente'
);

// Verificar correcci√≥n de idMatrizador
verificarContenido(
  'controllers/adminController.js',
  'where.idMatrizador = matrizadorId;',
  'Campo idMatrizador corregido',
  'Referencia a matrizador arreglada'
);

// Verificar correcci√≥n de numeroFactura
verificarContenido(
  'controllers/adminController.js',
  'numeroFactura: { [Op.iLike]: `%${busqueda}%` }  // CORREGIDO: Usar camelCase',
  'Campo numeroFactura corregido',
  'B√∫squeda por factura funcional'
);

console.log('\nüéØ 3. VERIFICANDO FUNCI√ìN VERDETALLE');
console.log('-'.repeat(50));

// Verificar que la funci√≥n verDetalle est√© bien definida
verificarContenido(
  'views/admin/documentos/listado.hbs',
  'function verDetalle(documentoId) {',
  'Funci√≥n verDetalle definida',
  'Navegaci√≥n a detalle operativa'
);

// Verificar la URL correcta
verificarContenido(
  'views/admin/documentos/listado.hbs',
  'window.location.href = `/admin/documentos/detalle/${documentoId}`;',
  'URL de detalle correcta',
  'Redirecci√≥n configurada'
);

// Verificar ruta en adminRoutes
verificarContenido(
  'routes/adminRoutes.js',
  "router.get('/documentos/detalle/:id', adminController.verDetalleDocumentoAdmin);",
  'Ruta admin detalle configurada',
  'Backend preparado para detalle'
);

// Verificar funci√≥n del controlador
verificarContenido(
  'controllers/adminController.js',
  'exports.verDetalleDocumentoAdmin = async (req, res) => {',
  'Funci√≥n controlador existe',
  'Backend operativo'
);

console.log('\nüé® 4. VERIFICANDO INTERFAZ MEJORADA');
console.log('-'.repeat(50));

// Verificar header simplificado
verificarContenido(
  'views/admin/documentos/listado.hbs',
  '<span><i class="fas fa-binoculars me-2"></i> Supervisi√≥n de Documentos</span>',
  'Header simplificado',
  'T√≠tulo claro y directo'
);

// Verificar que la tabla siga funcionando
verificarContenido(
  'views/admin/documentos/listado.hbs',
  'tabla-supervision-perfecta',
  'Tabla modelo maestro preservada',
  'Funcionalidad mantenida'
);

console.log('\nüìä 5. VERIFICANDO CONSISTENCIA DE CAMPOS');
console.log('-'.repeat(50));

// Verificar que no queden referencias a snake_case en lugares cr√≠ticos
verificarContenido(
  'controllers/adminController.js',
  'estado_pago',
  'Sin referencias snake_case',
  'Limpieza completa',
  true // negativo
);

verificarContenido(
  'controllers/adminController.js',
  'id_matrizador',
  'Sin referencias id_matrizador',
  'Consistencia mantenida',
  true // negativo
);

console.log('\n' + '='.repeat(70));
console.log('üìä RESUMEN DE VERIFICACI√ìN');
console.log('='.repeat(70));

const porcentajeExito = Math.round((contadorExitos / contadorTotal) * 100);

console.log(`‚úÖ Verificaciones exitosas: ${contadorExitos}/${contadorTotal} (${porcentajeExito}%)`);

if (verificacionCompleta) {
  console.log('\nüéâ ¬°CORRECCIONES APLICADAS EXITOSAMENTE!');
  console.log('');
  console.log('üî• PROBLEMAS RESUELTOS:');
  console.log('   ‚úÖ Avisos eliminados - Interfaz m√°s limpia');
  console.log('   ‚úÖ Campos backend corregidos - camelCase consistente');
  console.log('   ‚úÖ Funci√≥n verDetalle operativa');
  console.log('   ‚úÖ Rutas admin configuradas correctamente');
  console.log('   ‚úÖ Sin referencias snake_case problem√°ticas');
  console.log('   ‚úÖ Header simplificado y profesional');
  console.log('');
  console.log('üöÄ TABLA ADMIN LISTA PARA USO');
  console.log('');
  console.log('üìù PR√ìXIMOS PASOS:');
  console.log('   1. Reiniciar el servidor si est√° ejecut√°ndose');
  console.log('   2. Probar clic en bot√≥n "Ver Detalle"');
  console.log('   3. Verificar navegaci√≥n sin errores');
  console.log('');
  console.log('üåê ACCESO: http://localhost:3000/admin/documentos/listado');
  
} else {
  console.log('\n‚ö†Ô∏è  VERIFICACI√ìN INCOMPLETA');
  console.log(`   ${contadorTotal - contadorExitos} elementos requieren atenci√≥n`);
  
  if (porcentajeExito >= 80) {
    console.log('   ‚ÑπÔ∏è  La mayor√≠a de correcciones est√°n aplicadas');
  } else {
    console.log('   ‚ö†Ô∏è  Se requieren m√°s correcciones');
  }
}

console.log('\n' + '='.repeat(70));
console.log(`Verificaci√≥n completada: ${new Date().toLocaleString()}`);
console.log('Sistema de Trazabilidad Documental - Notar√≠a Digital');

// Salir con c√≥digo de estado apropiado
process.exit(verificacionCompleta ? 0 : 1); 