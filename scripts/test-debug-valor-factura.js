/**
 * Script de prueba para debuggear el error de valorFactura
 * Ejecutar con: node scripts/test-debug-valor-factura.js
 */

const { calcularValoresActualizados, calcularEstadoPago } = require('../utils/mathValidation');

console.log('üîç INICIANDO DEBUG DEL ERROR VALOR FACTURA');
console.log('='.repeat(60));

// Simular documento problem√°tico (como viene de la BD)
const documentoProblematico = {
  id: 155,
  valorFactura: null, // ‚ùå PROBLEMA: null en lugar de 2.06
  valorPagado: 0.00,
  valorPendiente: 0.00,
  valorRetenido: 0.00,
  estadoPago: 'pendiente',
  tieneRetencion: false
};

// Documento correcto
const documentoCorrecto = {
  id: 155,
  valorFactura: 2.06, // ‚úÖ CORRECTO
  valorPagado: 0.00,
  valorPendiente: 2.06,
  valorRetenido: 0.00,
  estadoPago: 'pendiente',
  tieneRetencion: false
};

// Datos de retenci√≥n
const datosRetencion = {
  numeroComprobanteRetencion: '001-002-000023591',
  razonSocialRetenedora: 'GRANCOMERCIO CIA. LTDA.',
  retencionIva: 0.27,
  retencionRenta: 0.18,
  totalRetenido: 0.45
};

console.log('üìÑ DOCUMENTO PROBLEM√ÅTICO:');
console.log('- ID:', documentoProblematico.id);
console.log('- Valor Factura:', documentoProblematico.valorFactura, '‚ùå NULL/UNDEFINED');
console.log('- Valor Pagado:', documentoProblematico.valorPagado);
console.log('- Valor Pendiente:', documentoProblematico.valorPendiente);
console.log('');

// PRUEBA 1: Reproducir el error
console.log('üßÆ PRUEBA 1: Reproducir error con documento problem√°tico');
console.log('-'.repeat(60));

try {
  const resultado1 = calcularValoresActualizados(documentoProblematico, 1.61, datosRetencion);
  console.log('‚úÖ RESULTADO (inesperado):', resultado1);
} catch (error) {
  console.log('‚ùå ERROR REPRODUCIDO:', error.message);
  console.log('üîç Stack trace:', error.stack);
}

console.log('');

// PRUEBA 2: Probar con documento correcto
console.log('üßÆ PRUEBA 2: Probar con documento correcto');
console.log('-'.repeat(60));

try {
  const resultado2 = calcularValoresActualizados(documentoCorrecto, 1.61, datosRetencion);
  console.log('‚úÖ RESULTADO CORRECTO:', resultado2);
} catch (error) {
  console.log('‚ùå ERROR INESPERADO:', error.message);
}

console.log('');

// PRUEBA 3: Probar calcularEstadoPago directamente
console.log('üßÆ PRUEBA 3: Probar calcularEstadoPago directamente');
console.log('-'.repeat(60));

try {
  const estado1 = calcularEstadoPago(documentoProblematico);
  console.log('‚úÖ Estado problem√°tico:', estado1);
} catch (error) {
  console.log('‚ùå ERROR EN CALCULAR ESTADO:', error.message);
}

try {
  const estado2 = calcularEstadoPago(documentoCorrecto);
  console.log('‚úÖ Estado correcto:', estado2);
} catch (error) {
  console.log('‚ùå ERROR INESPERADO EN ESTADO:', error.message);
}

console.log('');

// PRUEBA 4: Simular diferentes tipos de valorFactura problem√°ticos
console.log('üßÆ PRUEBA 4: Diferentes tipos de valorFactura problem√°ticos');
console.log('-'.repeat(60));

const casosProblematicos = [
  { valorFactura: null, descripcion: 'null' },
  { valorFactura: undefined, descripcion: 'undefined' },
  { valorFactura: 0, descripcion: 'cero' },
  { valorFactura: '', descripcion: 'string vac√≠o' },
  { valorFactura: 'abc', descripcion: 'string no num√©rico' },
  { valorFactura: NaN, descripcion: 'NaN' }
];

casosProblematicos.forEach((caso, index) => {
  console.log(`\nüìã Caso ${index + 1}: valorFactura = ${caso.descripcion}`);
  
  const documentoTest = {
    ...documentoCorrecto,
    valorFactura: caso.valorFactura
  };
  
  try {
    const resultado = calcularEstadoPago(documentoTest);
    console.log(`‚úÖ Resultado inesperado: ${resultado}`);
  } catch (error) {
    console.log(`‚ùå Error esperado: ${error.message}`);
  }
});

console.log('');
console.log('üéØ AN√ÅLISIS DEL PROBLEMA');
console.log('='.repeat(60));
console.log('‚úÖ El error se reproduce cuando:');
console.log('   ‚Ä¢ valorFactura es null, undefined, 0, o string no num√©rico');
console.log('   ‚Ä¢ parseFloat(valorFactura) resulta en 0 o NaN');
console.log('');
console.log('üîß POSIBLES CAUSAS EN EL SISTEMA:');
console.log('   ‚Ä¢ El documento no se est√° cargando correctamente de la BD');
console.log('   ‚Ä¢ El campo valorFactura no existe en el modelo');
console.log('   ‚Ä¢ Hay un problema en la consulta SQL');
console.log('   ‚Ä¢ El documento se est√° modificando antes de llegar a la funci√≥n');
console.log('');
console.log('üîç SIGUIENTE PASO:');
console.log('   ‚Ä¢ Verificar el log del controlador para ver qu√© documento se est√° pasando');
console.log('   ‚Ä¢ Revisar la consulta de base de datos');
console.log('   ‚Ä¢ Verificar el modelo Documento.js'); 