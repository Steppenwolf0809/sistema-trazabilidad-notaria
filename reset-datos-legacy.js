/**
 * Script de Reset Seguro de Datos Legacy - ProNotary
 * 
 * OBJETIVO: Limpiar datos inconsistentes de testing manteniendo estructura y usuarios
 * 
 * ELIMINA: Documentos, eventos, auditor√≠a, relaciones
 * PRESERVA: Estructura de tablas, usuarios, configuraciones
 * 
 * Ejecutar con: node reset-datos-legacy.js
 */

const { Sequelize } = require('sequelize');
const db = require('./models');

/**
 * Funci√≥n principal de reset seguro
 */
async function resetDatosLegacy() {
  console.log('üóÉÔ∏è  INICIANDO RESET SEGURO DE DATOS LEGACY...');
  console.log('‚ö†Ô∏è  MANTENIENDO: Estructura, usuarios, configuraciones');
  console.log('üóëÔ∏è  ELIMINANDO: Documentos, eventos, auditor√≠a de testing');
  
  try {
    // PASO 1: Backup de usuarios importantes (por si acaso)
    console.log('\nüìã PASO 1: Backup de configuraciones cr√≠ticas...');
    
    const usuariosActivos = await db.Matrizador.findAll({
      attributes: ['id', 'nombre', 'email', 'rol'],
      raw: true
    });
    console.log(`‚úÖ ${usuariosActivos.length} usuarios encontrados para preservar`);
    
    // PASO 2: Limpiar tablas de datos (EN ORDEN CORRECTO por FK)
    console.log('\nüóëÔ∏è  PASO 2: Limpiando datos legacy...');
    
    // 2.1 Eliminar notificaciones (tienen FK a documentos)
    console.log('  ‚Üí Limpiando notificaciones enviadas...');
    try {
      await db.NotificacionEnviada.destroy({ 
        where: {},
        truncate: true,
        cascade: true 
      });
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Tabla NotificacionEnviada no encontrada (normal si no existe)');
    }
    
    // 2.2 Eliminar eventos y auditor√≠a (tienen FK a documentos)
    console.log('  ‚Üí Limpiando eventos de documentos...');
    const eventosEliminados = await db.EventoDocumento.count();
    await db.EventoDocumento.destroy({ 
      where: {},
      truncate: true,
      cascade: true 
    });
    console.log(`    ‚úÖ ${eventosEliminados} eventos eliminados`);
    
    console.log('  ‚Üí Limpiando registros de auditor√≠a...');
    const auditoriaEliminada = await db.RegistroAuditoria.count();
    await db.RegistroAuditoria.destroy({ 
      where: {},
      truncate: true,
      cascade: true 
    });
    console.log(`    ‚úÖ ${auditoriaEliminada} registros de auditor√≠a eliminados`);
    
    // 2.3 Limpiar cambios de matrizador
    console.log('  ‚Üí Limpiando cambios de matrizador...');
    try {
      const cambiosEliminados = await db.CambioMatrizador.count();
      await db.CambioMatrizador.destroy({ 
        where: {},
        truncate: true,
        cascade: true 
      });
      console.log(`    ‚úÖ ${cambiosEliminados} cambios de matrizador eliminados`);
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Tabla CambioMatrizador no encontrada (normal si no existe)');
    }
    
    // 2.4 Limpiar autorizaciones de entrega
    console.log('  ‚Üí Limpiando autorizaciones de entrega...');
    try {
      const autorizacionesEliminadas = await db.AutorizacionEntrega.count();
      await db.AutorizacionEntrega.destroy({ 
        where: {},
        truncate: true,
        cascade: true 
      });
      console.log(`    ‚úÖ ${autorizacionesEliminadas} autorizaciones eliminadas`);
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Tabla AutorizacionEntrega no encontrada (normal si no existe)');
    }
    
    // 2.5 Limpiar auditor√≠a de eliminaciones
    console.log('  ‚Üí Limpiando auditor√≠a de eliminaciones...');
    try {
      const auditoriaElimEliminada = await db.AuditoriaEliminacion.count();
      await db.AuditoriaEliminacion.destroy({ 
        where: {},
        truncate: true,
        cascade: true 
      });
      console.log(`    ‚úÖ ${auditoriaElimEliminada} registros de auditor√≠a de eliminaci√≥n eliminados`);
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Tabla AuditoriaEliminacion no encontrada (normal si no existe)');
    }
    
    // 2.6 Limpiar relaciones de documentos
    console.log('  ‚Üí Limpiando relaciones entre documentos...');
    try {
      const relacionesEliminadas = await db.DocumentoRelacion.count();
      await db.DocumentoRelacion.destroy({ 
        where: {},
        truncate: true,
        cascade: true 
      });
      console.log(`    ‚úÖ ${relacionesEliminadas} relaciones eliminadas`);
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Tabla DocumentoRelacion no encontrada (normal si no existe)');
    }
    
    // 2.7 Limpiar documentos relacionados
    console.log('  ‚Üí Limpiando documentos relacionados...');
    try {
      const docRelacionadosEliminados = await db.DocumentosRelacionados.count();
      await db.DocumentosRelacionados.destroy({ 
        where: {},
        truncate: true,
        cascade: true 
      });
      console.log(`    ‚úÖ ${docRelacionadosEliminados} documentos relacionados eliminados`);
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Tabla DocumentosRelacionados no encontrada (normal si no existe)');
    }
    
    // 2.8 Finalmente eliminar documentos principales
    console.log('  ‚Üí Limpiando documentos principales...');
    const documentosEliminados = await db.Documento.count();
    await db.Documento.destroy({ 
      where: {},
      truncate: true,
      cascade: true 
    });
    console.log(`    ‚úÖ ${documentosEliminados} documentos eliminados`);
    
    // PASO 3: Reset de secuencias (IDs empiezan desde 1)
    console.log('\nüîÑ PASO 3: Reseteando secuencias de IDs...');
    
    const secuencias = [
      'documentos_id_seq',
      'evento_documentos_id_seq', 
      'registro_auditorias_id_seq',
      'cambio_matrizadors_id_seq',
      'autorizacion_entregas_id_seq',
      'documento_relacions_id_seq',
      'documentos_relacionados_id_seq',
      'auditoria_eliminacions_id_seq',
      'notificacion_enviadas_id_seq'
    ];
    
    for (const seq of secuencias) {
      try {
        await db.sequelize.query(`ALTER SEQUENCE ${seq} RESTART WITH 1`);
        console.log(`  ‚úÖ Secuencia ${seq} reseteada`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  Secuencia ${seq} no encontrada (normal si no existe)`);
      }
    }
    
    // PASO 4: Verificaci√≥n de limpieza
    console.log('\n‚úÖ PASO 4: Verificando limpieza...');
    
    const verificacion = {
      documentos: await db.Documento.count(),
      eventos: await db.EventoDocumento.count(),
      auditoria: await db.RegistroAuditoria.count(),
      usuarios: await db.Matrizador.count()
    };
    
    // Verificaciones adicionales opcionales
    try {
      verificacion.notificaciones = await db.NotificacionEnviada.count();
    } catch (error) {
      verificacion.notificaciones = 'N/A';
    }
    
    try {
      verificacion.cambios = await db.CambioMatrizador.count();
    } catch (error) {
      verificacion.cambios = 'N/A';
    }
    
    console.log('üìä ESTADO POST-LIMPIEZA:');
    console.log(`  ‚Ä¢ Documentos: ${verificacion.documentos} (debe ser 0)`);
    console.log(`  ‚Ä¢ Eventos: ${verificacion.eventos} (debe ser 0)`);
    console.log(`  ‚Ä¢ Auditor√≠a: ${verificacion.auditoria} (debe ser 0)`);
    console.log(`  ‚Ä¢ Notificaciones: ${verificacion.notificaciones} (debe ser 0 o N/A)`);
    console.log(`  ‚Ä¢ Cambios: ${verificacion.cambios} (debe ser 0 o N/A)`);
    console.log(`  ‚Ä¢ Usuarios: ${verificacion.usuarios} (preservados)`);
    
    // PASO 5: Validaci√≥n final
    if (verificacion.documentos === 0 && verificacion.eventos === 0) {
      console.log('\nüéâ ¬°RESET COMPLETADO EXITOSAMENTE!');
      console.log('‚úÖ Base de datos limpia y lista para testing con datos reales');
      console.log('‚úÖ Estructura y usuarios preservados');
      console.log('\nüìã PR√ìXIMOS PASOS RECOMENDADOS:');
      console.log('1. Cargar XMLs nuevos desde cero');
      console.log('2. Validar flujo completo: XML ‚Üí Factura ‚Üí Pago ‚Üí Entrega');
      console.log('3. Verificar que matem√°tica financiera sea correcta');
      console.log('4. Confirmar que no hay inconsistencias');
      console.log('\nüîó COMANDOS √öTILES:');
      console.log('   node test-matematica-financiera.js  # Para validar c√°lculos');
      console.log('   npm start                           # Para iniciar el sistema');
    } else {
      console.log('\n‚ùå ERROR: La limpieza no fue completa');
      console.log('Revisar logs arriba para identificar problemas');
    }
    
  } catch (error) {
    console.error('\nüí• ERROR DURANTE RESET:', error);
    console.log('\nüîß POSIBLES SOLUCIONES:');
    console.log('1. Verificar conexi√≥n a base de datos');
    console.log('2. Asegurar que no hay procesos usando la BD');
    console.log('3. Revisar permisos de usuario PostgreSQL');
    console.log('4. Verificar que todas las tablas existen');
    throw error;
  }
}

/**
 * Funci√≥n de verificaci√≥n pre-reset
 */
async function verificarEstadoActual() {
  console.log('üîç VERIFICANDO ESTADO ACTUAL DE LA BASE DE DATOS...\n');
  
  try {
    const estado = {
      documentos: await db.Documento.count(),
      documentosPagados: await db.Documento.count({ where: { estado_pago: 'pagado' } }),
      documentosPendientes: await db.Documento.count({ where: { estado_pago: 'pendiente' } }),
      eventos: await db.EventoDocumento.count(),
      usuarios: await db.Matrizador.count(),
      auditoria: await db.RegistroAuditoria.count()
    };
    
    // Verificaciones adicionales opcionales
    try {
      estado.notificaciones = await db.NotificacionEnviada.count();
    } catch (error) {
      estado.notificaciones = 'N/A (tabla no existe)';
    }
    
    try {
      estado.cambios = await db.CambioMatrizador.count();
    } catch (error) {
      estado.cambios = 'N/A (tabla no existe)';
    }
    
    console.log('üìä ESTADO ACTUAL:');
    console.log(`  ‚Ä¢ Total documentos: ${estado.documentos}`);
    console.log(`  ‚Ä¢ Documentos pagados: ${estado.documentosPagados}`);
    console.log(`  ‚Ä¢ Documentos pendientes: ${estado.documentosPendientes}`);
    console.log(`  ‚Ä¢ Eventos registrados: ${estado.eventos}`);
    console.log(`  ‚Ä¢ Usuarios en sistema: ${estado.usuarios}`);
    console.log(`  ‚Ä¢ Registros de auditor√≠a: ${estado.auditoria}`);
    console.log(`  ‚Ä¢ Notificaciones: ${estado.notificaciones}`);
    console.log(`  ‚Ä¢ Cambios de matrizador: ${estado.cambios}`);
    
    // Calcular m√©tricas financieras actuales
    try {
      const [facturadoResult] = await db.sequelize.query(`
        SELECT COALESCE(SUM(valor_factura), 0) as total
        FROM documentos
        WHERE numero_factura IS NOT NULL
        AND estado NOT IN ('eliminado', 'nota_credito')
      `);
      
      const [cobradoResult] = await db.sequelize.query(`
        SELECT COALESCE(SUM(valor_factura), 0) as total
        FROM documentos
        WHERE estado_pago = 'pagado'
        AND numero_factura IS NOT NULL
        AND estado NOT IN ('eliminado', 'nota_credito')
      `);
      
      const facturado = parseFloat(facturadoResult[0]?.total || 0);
      const cobrado = parseFloat(cobradoResult[0]?.total || 0);
      const pendiente = facturado - cobrado;
      
      console.log('\nüí∞ M√âTRICAS FINANCIERAS ACTUALES:');
      console.log(`  ‚Ä¢ Total facturado: $${facturado.toFixed(2)}`);
      console.log(`  ‚Ä¢ Total cobrado: $${cobrado.toFixed(2)}`);
      console.log(`  ‚Ä¢ Pendiente de cobro: $${pendiente.toFixed(2)}`);
      
      const diferencia = Math.abs(facturado - (cobrado + pendiente));
      if (diferencia > 0.01) {
        console.log(`  ‚ö†Ô∏è  INCONSISTENCIA DETECTADA: Diferencia de $${diferencia.toFixed(2)}`);
        console.log('     ‚Üí Esta es la raz√≥n para hacer el reset');
      } else {
        console.log('  ‚úÖ Matem√°tica financiera correcta');
      }
      
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Error calculando m√©tricas financieras:', error.message);
    }
    
    return estado;
  } catch (error) {
    console.error('Error verificando estado:', error);
    throw error;
  }
}

/**
 * Funci√≥n para confirmar el reset (simulada)
 */
function confirmarReset() {
  console.log('\n‚ö†Ô∏è  ¬øCONTINUAR CON EL RESET?');
  console.log('   Esto eliminar√° TODOS los documentos y datos de testing');
  console.log('   Los usuarios y estructura se mantendr√°n');
  console.log('\n   Para confirmar en producci√≥n, modificar esta funci√≥n');
  console.log('   Por ahora, continuando autom√°ticamente...\n');
  
  // En producci√≥n, aqu√≠ habr√≠a una confirmaci√≥n interactiva
  // Por ahora, retornamos true para continuar
  return true;
}

/**
 * Funci√≥n principal de ejecuci√≥n
 */
async function ejecutarReset() {
  try {
    console.log('üöÄ SISTEMA DE RESET SEGURO - PRONOTARY');
    console.log('=====================================\n');
    
    // Verificar estado antes
    await verificarEstadoActual();
    
    // Confirmar reset
    const confirmado = confirmarReset();
    if (!confirmado) {
      console.log('‚ùå Reset cancelado por el usuario');
      return;
    }
    
    // Ejecutar reset
    await resetDatosLegacy();
    
    console.log('\nüéØ RESET COMPLETADO - SISTEMA LISTO PARA DATOS REALES');
    
  } catch (error) {
    console.error('üí• Error ejecutando reset:', error);
    console.log('\nüÜò Si el error persiste:');
    console.log('1. Verificar que el servidor de BD est√© corriendo');
    console.log('2. Verificar credenciales en .env');
    console.log('3. Asegurar que no hay conexiones activas a la BD');
    process.exit(1);
  } finally {
    // Cerrar conexi√≥n
    try {
      await db.sequelize.close();
      console.log('üîå Conexi√≥n a base de datos cerrada');
    } catch (error) {
      console.log('‚ö†Ô∏è  Error cerrando conexi√≥n:', error.message);
    }
  }
}

// Exportar funciones para uso modular
module.exports = {
  resetDatosLegacy,
  verificarEstadoActual,
  ejecutarReset
};

// Si se ejecuta directamente
if (require.main === module) {
  ejecutarReset();
} 