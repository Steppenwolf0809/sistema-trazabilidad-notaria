/**
 * Script para investigar documentos con valorFactura = 0 incorrectos
 * 
 * PROBLEMA REPORTADO:
 * - Documentos en la vista de archivo muestran $0.00
 * - Solo FISCALIA GENERAL DEL ESTADO deber√≠a ser $0.00
 * - Otros documentos como DARWIN ENRIQUE SALAZAR AMORES deber√≠an tener valores reales
 */

const { sequelize } = require('./config/database');
const Documento = require('./models/Documento');
const { Op } = require('sequelize');

async function investigarDocumentosValorCero() {
  try {
    console.log('üîç INVESTIGANDO DOCUMENTOS CON VALOR $0.00 INCORRECTOS');
    console.log('=' .repeat(70));

    // 1. Buscar documentos con valor 0 que tienen n√∫mero de factura
    console.log('üìã PASO 1: Documentos con valorFactura = 0 pero con n√∫mero de factura');
    
    const documentosValorCero = await Documento.findAll({
      where: {
        valorFactura: 0,
        numeroFactura: { [Op.not]: null },
        estado: { [Op.notIn]: ['eliminado', 'nota_credito', 'cancelado'] }
      },
      attributes: [
        'id', 'codigoBarras', 'nombreCliente', 'identificacionCliente', 
        'valorFactura', 'numeroFactura', 'fechaFactura', 'created_at'
      ],
      order: [['created_at', 'DESC']],
      limit: 20
    });

    console.log(`\nüìä Encontrados ${documentosValorCero.length} documentos con valor $0.00 y n√∫mero de factura:`);
    
    if (documentosValorCero.length === 0) {
      console.log('‚úÖ No hay documentos problem√°ticos encontrados');
      return;
    }

    // Analizar cada documento
    let documentosProblematicos = 0;
    let documentosLegitimos = 0;

    console.log('\nüìã AN√ÅLISIS DETALLADO:');
    console.log('ID | C√≥digo | Cliente | Valor | Factura | Fecha | ¬øLeg√≠timo?');
    console.log('---|--------|---------|-------|---------|-------|----------');

    documentosValorCero.forEach(doc => {
      const esLegitimo = esDocumentoExentoLegitimo(doc);
      
      if (esLegitimo) {
        documentosLegitimos++;
      } else {
        documentosProblematicos++;
      }

      const fechaCreacion = new Date(doc.created_at).toLocaleDateString('es-EC');
      const estado = esLegitimo ? '‚úÖ S√ç' : '‚ùå NO';
      
      console.log(
        `${doc.id} | ${doc.codigoBarras} | ${doc.nombreCliente?.substring(0, 20)}... | $${doc.valorFactura} | ${doc.numeroFactura} | ${fechaCreacion} | ${estado}`
      );
    });

    console.log('\nüìä RESUMEN:');
    console.log(`- Total documentos analizados: ${documentosValorCero.length}`);
    console.log(`- Documentos exentos leg√≠timos: ${documentosLegitimos}`);
    console.log(`- Documentos problem√°ticos: ${documentosProblematicos}`);

    if (documentosProblematicos > 0) {
      console.log('\nüö® DOCUMENTOS PROBLEM√ÅTICOS DETECTADOS');
      console.log('Estos documentos probablemente deber√≠an tener un valor > $0.00');
      
      // 2. Buscar documentos similares con valores reales para comparar
      console.log('\nüìã PASO 2: Buscando documentos similares con valores reales...');
      
      const documentosConValor = await Documento.findAll({
        where: {
          valorFactura: { [Op.gt]: 0 },
          numeroFactura: { [Op.not]: null },
          estado: { [Op.notIn]: ['eliminado', 'nota_credito', 'cancelado'] }
        },
        attributes: [
          'id', 'codigoBarras', 'nombreCliente', 'valorFactura', 'numeroFactura', 'created_at'
        ],
        order: [['created_at', 'DESC']],
        limit: 10
      });

      console.log('\nüìä DOCUMENTOS CON VALORES REALES (para comparaci√≥n):');
      console.log('ID | C√≥digo | Cliente | Valor | Factura | Fecha');
      console.log('---|--------|---------|-------|---------|-------');

      documentosConValor.forEach(doc => {
        const fechaCreacion = new Date(doc.created_at).toLocaleDateString('es-EC');
        console.log(
          `${doc.id} | ${doc.codigoBarras} | ${doc.nombreCliente?.substring(0, 20)}... | $${doc.valorFactura} | ${doc.numeroFactura} | ${fechaCreacion}`
        );
      });

      // 3. Proponer soluci√≥n
      console.log('\nüîß POSIBLES SOLUCIONES:');
      console.log('1. ‚úÖ Revisar XMLs originales para extraer valores correctos');
      console.log('2. ‚úÖ Actualizar documentos problem√°ticos con valores reales');
      console.log('3. ‚úÖ Implementar validaci√≥n para prevenir futuros casos');
      
      // 4. Generar script de correcci√≥n
      console.log('\nüìù GENERANDO LISTA DE DOCUMENTOS PARA CORRECCI√ìN...');
      
      const documentosParaCorregir = documentosValorCero.filter(doc => !esDocumentoExentoLegitimo(doc));
      
      if (documentosParaCorregir.length > 0) {
        console.log('\nüéØ DOCUMENTOS QUE NECESITAN CORRECCI√ìN:');
        documentosParaCorregir.forEach(doc => {
          console.log(`- ID ${doc.id}: ${doc.nombreCliente} (${doc.numeroFactura})`);
        });
        
        console.log('\nüí° RECOMENDACI√ìN:');
        console.log('Estos documentos probablemente se crearon con una versi√≥n anterior');
        console.log('del c√≥digo que no extra√≠a correctamente el valor del XML.');
        console.log('Se recomienda revisar los XMLs originales y actualizar los valores.');
      }
    } else {
      console.log('\n‚úÖ TODOS LOS DOCUMENTOS CON VALOR $0.00 SON LEG√çTIMOS');
      console.log('No se requiere correcci√≥n.');
    }

  } catch (error) {
    console.error('‚ùå Error en investigaci√≥n:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await sequelize.close();
    console.log('\nüîí Conexi√≥n a base de datos cerrada');
  }
}

/**
 * Determina si un documento con valor $0.00 es leg√≠timamente exento
 * @param {Object} documento - Documento a evaluar
 * @returns {boolean} True si es leg√≠timamente exento
 */
function esDocumentoExentoLegitimo(documento) {
  const cliente = documento.nombreCliente?.toLowerCase() || '';
  
  // T√©rminos que indican exenci√≥n leg√≠tima
  const terminosExentos = [
    'fiscalia', 'fiscal√≠a', 'fiscal',
    'juzgado', 'tribunal', 'corte',
    'ministerio', 'gobierno', 'municipio',
    'consejo provincial', 'asamblea nacional',
    'defensoria', 'defensor√≠a',
    'procuraduria', 'procuradur√≠a'
  ];
  
  // Verificar si el cliente es una entidad exenta
  const esEntidadExenta = terminosExentos.some(termino => cliente.includes(termino));
  
  // Tambi√©n verificar por patrones en el n√∫mero de factura que indiquen exenci√≥n
  const facturaNumero = documento.numeroFactura?.toLowerCase() || '';
  const tienePatronExento = facturaNumero.includes('exento') || facturaNumero.includes('0000');
  
  return esEntidadExenta || tienePatronExento;
}

// Ejecutar investigaci√≥n
if (require.main === module) {
  investigarDocumentosValorCero()
    .then(() => {
      console.log('\n‚úÖ Investigaci√≥n completada');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Error en investigaci√≥n:', error);
      process.exit(1);
    });
}

module.exports = { investigarDocumentosValorCero, esDocumentoExentoLegitimo }; 